name: Reusable Mise Deploy Workflow

on:
  workflow_call:
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      DEPLOY_HOST:
        required: true
      DEPLOY_USER:
        required: true

permissions:
  contents: read
  packages: read

jobs:
  deploy:
    runs-on: self-hosted
    defaults:
      run:
        shell: bash
    env:
      # Configure a constant location for the uv cache
      UV_CACHE_DIR: /tmp/.uv-cache
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - name: pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: uv cache
        uses: actions/cache@v4
        if: hashFiles('uv.lock') != ''
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      - uses: jdx/mise-action@v2
        with:
          experimental: true
          version: v2025.7.3

      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Setup .npmrc for GitHub Packages
        run: |
          echo "@${{ github.repository_owner }}:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "@nuqayah:registry=https://npm.pkg.github.com" >> .npmrc

      - name: Deploy
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: |
          perl -i -pe 's/(python.uv_venv_auto =) true/$1 false/' mise.toml
          mise run deploy

      - name: Minimize uv cache
        if: hashFiles('uv.lock') != '' && success()
        run: command -v uv &>/dev/null && uv cache prune --ci || true
